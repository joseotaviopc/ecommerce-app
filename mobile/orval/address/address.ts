/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Teste mobile
 * API para o teste mobile
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateAddressDto,
  OutputAddressDto,
  UpdateAddressDto
} from '.././model';

import { customInstance } from '../../services/api';
import type { ErrorType, BodyType } from '../../services/api';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Create a new address
 */
export const addressControllerCreate = (
    createAddressDto: BodyType<CreateAddressDto>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OutputAddressDto>(
      {url: `/address`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createAddressDto, signal
    },
      options);
    }
  


export const getAddressControllerCreateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addressControllerCreate>>, TError,{data: BodyType<CreateAddressDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof addressControllerCreate>>, TError,{data: BodyType<CreateAddressDto>}, TContext> => {
    
const mutationKey = ['addressControllerCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addressControllerCreate>>, {data: BodyType<CreateAddressDto>}> = (props) => {
          const {data} = props ?? {};

          return  addressControllerCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddressControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof addressControllerCreate>>>
    export type AddressControllerCreateMutationBody = BodyType<CreateAddressDto>
    export type AddressControllerCreateMutationError = ErrorType<void>

    export const useAddressControllerCreate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addressControllerCreate>>, TError,{data: BodyType<CreateAddressDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof addressControllerCreate>>,
        TError,
        {data: BodyType<CreateAddressDto>},
        TContext
      > => {

      const mutationOptions = getAddressControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get all addresses
 */
export const addressControllerFindAll = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OutputAddressDto[]>(
      {url: `/address`, method: 'GET', signal
    },
      options);
    }
  

export const getAddressControllerFindAllQueryKey = () => {
    return [`/address`] as const;
    }

    
export const getAddressControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof addressControllerFindAll>>, TError = ErrorType<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindAll>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAddressControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof addressControllerFindAll>>> = ({ signal }) => addressControllerFindAll(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AddressControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof addressControllerFindAll>>>
export type AddressControllerFindAllQueryError = ErrorType<void>


export function useAddressControllerFindAll<TData = Awaited<ReturnType<typeof addressControllerFindAll>>, TError = ErrorType<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof addressControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof addressControllerFindAll>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAddressControllerFindAll<TData = Awaited<ReturnType<typeof addressControllerFindAll>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof addressControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof addressControllerFindAll>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAddressControllerFindAll<TData = Awaited<ReturnType<typeof addressControllerFindAll>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindAll>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useAddressControllerFindAll<TData = Awaited<ReturnType<typeof addressControllerFindAll>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindAll>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAddressControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get an address by id
 */
export const addressControllerFindOne = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OutputAddressDto>(
      {url: `/address/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getAddressControllerFindOneQueryKey = (id: string,) => {
    return [`/address/${id}`] as const;
    }

    
export const getAddressControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof addressControllerFindOne>>, TError = ErrorType<void>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindOne>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAddressControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof addressControllerFindOne>>> = ({ signal }) => addressControllerFindOne(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindOne>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AddressControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof addressControllerFindOne>>>
export type AddressControllerFindOneQueryError = ErrorType<void>


export function useAddressControllerFindOne<TData = Awaited<ReturnType<typeof addressControllerFindOne>>, TError = ErrorType<void>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindOne>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof addressControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof addressControllerFindOne>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAddressControllerFindOne<TData = Awaited<ReturnType<typeof addressControllerFindOne>>, TError = ErrorType<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindOne>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof addressControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof addressControllerFindOne>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAddressControllerFindOne<TData = Awaited<ReturnType<typeof addressControllerFindOne>>, TError = ErrorType<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindOne>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useAddressControllerFindOne<TData = Awaited<ReturnType<typeof addressControllerFindOne>>, TError = ErrorType<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof addressControllerFindOne>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAddressControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update an address
 */
export const addressControllerUpdate = (
    id: string,
    updateAddressDto: BodyType<UpdateAddressDto>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<OutputAddressDto>(
      {url: `/address/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateAddressDto
    },
      options);
    }
  


export const getAddressControllerUpdateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addressControllerUpdate>>, TError,{id: string;data: BodyType<UpdateAddressDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof addressControllerUpdate>>, TError,{id: string;data: BodyType<UpdateAddressDto>}, TContext> => {
    
const mutationKey = ['addressControllerUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addressControllerUpdate>>, {id: string;data: BodyType<UpdateAddressDto>}> = (props) => {
          const {id,data} = props ?? {};

          return  addressControllerUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddressControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof addressControllerUpdate>>>
    export type AddressControllerUpdateMutationBody = BodyType<UpdateAddressDto>
    export type AddressControllerUpdateMutationError = ErrorType<void>

    export const useAddressControllerUpdate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addressControllerUpdate>>, TError,{id: string;data: BodyType<UpdateAddressDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof addressControllerUpdate>>,
        TError,
        {id: string;data: BodyType<UpdateAddressDto>},
        TContext
      > => {

      const mutationOptions = getAddressControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Delete an address
 */
export const addressControllerRemove = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<OutputAddressDto>(
      {url: `/address/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getAddressControllerRemoveMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addressControllerRemove>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof addressControllerRemove>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['addressControllerRemove'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addressControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  addressControllerRemove(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddressControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof addressControllerRemove>>>
    
    export type AddressControllerRemoveMutationError = ErrorType<void>

    export const useAddressControllerRemove = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addressControllerRemove>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof addressControllerRemove>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getAddressControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    