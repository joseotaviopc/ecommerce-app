/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Teste mobile
 * API para o teste mobile
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateCartDto,
  OutputCartDto,
  UpdateCartDto
} from '.././model';

import { customInstance } from '../../services/api';
import type { ErrorType, BodyType } from '../../services/api';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Create a new cart
 */
export const cartControllerCreate = (
    createCartDto: BodyType<CreateCartDto>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OutputCartDto>(
      {url: `/cart`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCartDto, signal
    },
      options);
    }
  


export const getCartControllerCreateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cartControllerCreate>>, TError,{data: BodyType<CreateCartDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof cartControllerCreate>>, TError,{data: BodyType<CreateCartDto>}, TContext> => {
    
const mutationKey = ['cartControllerCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cartControllerCreate>>, {data: BodyType<CreateCartDto>}> = (props) => {
          const {data} = props ?? {};

          return  cartControllerCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CartControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof cartControllerCreate>>>
    export type CartControllerCreateMutationBody = BodyType<CreateCartDto>
    export type CartControllerCreateMutationError = ErrorType<void>

    export const useCartControllerCreate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cartControllerCreate>>, TError,{data: BodyType<CreateCartDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof cartControllerCreate>>,
        TError,
        {data: BodyType<CreateCartDto>},
        TContext
      > => {

      const mutationOptions = getCartControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * List all cart
 */
export const cartControllerFindAll = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OutputCartDto[]>(
      {url: `/cart`, method: 'GET', signal
    },
      options);
    }
  

export const getCartControllerFindAllQueryKey = () => {
    return [`/cart`] as const;
    }

    
export const getCartControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof cartControllerFindAll>>, TError = ErrorType<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof cartControllerFindAll>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCartControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof cartControllerFindAll>>> = ({ signal }) => cartControllerFindAll(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof cartControllerFindAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CartControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof cartControllerFindAll>>>
export type CartControllerFindAllQueryError = ErrorType<void>


export function useCartControllerFindAll<TData = Awaited<ReturnType<typeof cartControllerFindAll>>, TError = ErrorType<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof cartControllerFindAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof cartControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof cartControllerFindAll>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCartControllerFindAll<TData = Awaited<ReturnType<typeof cartControllerFindAll>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof cartControllerFindAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof cartControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof cartControllerFindAll>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCartControllerFindAll<TData = Awaited<ReturnType<typeof cartControllerFindAll>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof cartControllerFindAll>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCartControllerFindAll<TData = Awaited<ReturnType<typeof cartControllerFindAll>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof cartControllerFindAll>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCartControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get a new cart by id
 */
export const cartControllerFindOne = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OutputCartDto>(
      {url: `/cart/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getCartControllerFindOneQueryKey = (id: string,) => {
    return [`/cart/${id}`] as const;
    }

    
export const getCartControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof cartControllerFindOne>>, TError = ErrorType<void>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof cartControllerFindOne>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCartControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof cartControllerFindOne>>> = ({ signal }) => cartControllerFindOne(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof cartControllerFindOne>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CartControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof cartControllerFindOne>>>
export type CartControllerFindOneQueryError = ErrorType<void>


export function useCartControllerFindOne<TData = Awaited<ReturnType<typeof cartControllerFindOne>>, TError = ErrorType<void>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof cartControllerFindOne>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof cartControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof cartControllerFindOne>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCartControllerFindOne<TData = Awaited<ReturnType<typeof cartControllerFindOne>>, TError = ErrorType<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof cartControllerFindOne>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof cartControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof cartControllerFindOne>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCartControllerFindOne<TData = Awaited<ReturnType<typeof cartControllerFindOne>>, TError = ErrorType<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof cartControllerFindOne>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCartControllerFindOne<TData = Awaited<ReturnType<typeof cartControllerFindOne>>, TError = ErrorType<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof cartControllerFindOne>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCartControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update a cart
 */
export const cartControllerUpdate = (
    id: string,
    updateCartDto: BodyType<UpdateCartDto>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<OutputCartDto>(
      {url: `/cart/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateCartDto
    },
      options);
    }
  


export const getCartControllerUpdateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cartControllerUpdate>>, TError,{id: string;data: BodyType<UpdateCartDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof cartControllerUpdate>>, TError,{id: string;data: BodyType<UpdateCartDto>}, TContext> => {
    
const mutationKey = ['cartControllerUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cartControllerUpdate>>, {id: string;data: BodyType<UpdateCartDto>}> = (props) => {
          const {id,data} = props ?? {};

          return  cartControllerUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CartControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof cartControllerUpdate>>>
    export type CartControllerUpdateMutationBody = BodyType<UpdateCartDto>
    export type CartControllerUpdateMutationError = ErrorType<void>

    export const useCartControllerUpdate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cartControllerUpdate>>, TError,{id: string;data: BodyType<UpdateCartDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof cartControllerUpdate>>,
        TError,
        {id: string;data: BodyType<UpdateCartDto>},
        TContext
      > => {

      const mutationOptions = getCartControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Delete a cart
 */
export const cartControllerRemove = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<OutputCartDto>(
      {url: `/cart/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getCartControllerRemoveMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cartControllerRemove>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof cartControllerRemove>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['cartControllerRemove'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cartControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  cartControllerRemove(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CartControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof cartControllerRemove>>>
    
    export type CartControllerRemoveMutationError = ErrorType<void>

    export const useCartControllerRemove = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cartControllerRemove>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof cartControllerRemove>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getCartControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    